package ${packageName}.controller;

import java.util.List;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import com.inovance.eto.common.annotation.Log;
import com.inovance.eto.common.enums.BusinessType;
import ${packageName}.domain.${ClassName};
import ${packageName}.service.I${ClassName}Service;
import org.springframework.beans.BeanUtils;
import com.inovance.eto.common.core.controller.BaseController;
import com.inovance.eto.common.core.domain.R;
import com.inovance.eto.common.utils.poi.ExcelUtil;
#if($table.crud)
import com.inovance.eto.common.core.page.TableDataInfo;
#elseif($table.tree)
#end

/**
 * ${functionName} Controller
 *
 * @author ${author}
 * @date ${datetime}
 */
@Api(tags = {"${functionName}"})
@RestController
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController {

    @Autowired
    private I${ClassName}Service service;

/**
 * 列表
 */
@ApiOperation("列表")
@ApiImplicitParam(name = "${ClassName}Dto", value = "${functionName}对象")
//@PreAuthorize("hasAuthority('${permissionPrefix}:list')")
@GetMapping("/list")
    public TableDataInfo list(${ClassName}Dto ${className}Dto) {
        QueryWrapper<${ClassName}Do> wrapper = new QueryWrapper<>();
        startPage(CommonConstant.SQL_DEFAULT_ORDER);
        List<${ClassName}Do> doList = service.list(wrapper);
        List<${ClassName}Dto> dtoList = new ArrayList<>();
            ${ClassName}Dto dto;
        for (${ClassName}Do p : doList) {
            dto = new ${ClassName}Dto();
            BeanUtils.copyProperties(p, dto);
            dto.setCreateTime(DateUtil.dateToString(p.getCreateTime(), true));
            dtoList.add(dto);
        }
        return getDataTable(dtoList, doList);
    }


    /**
     * 详情
     */
    @ApiOperation("详情")
    @ApiImplicitParam(name = "${pkColumn.javaField}", value = "${pkColumn.javaField}")
    //@PreAuthorize("hasAuthority('${permissionPrefix}:detail')")
    @GetMapping(value = "/{${pkColumn.javaField}}")
    public R getInfo(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
            ${ClassName}Dto dto = new ${ClassName}Dto();
        ${ClassName}Do ${className}Do = service.getById(${pkColumn.javaField});
        BeanUtils.copyProperties(${className}Do, dto);
        return R.success(dto);
    }

    /**
     * 新增
     */
    @ApiOperation("新增")
    @ApiImplicitParam(name = "${ClassName}Dto", value = "${functionName}对象")
    //@PreAuthorize("hasAuthority('${permissionPrefix}:add')")
    @Log(title = "${functionName}", businessType = BusinessType.INSERT)
    @PostMapping
    public R add(@RequestBody ${ClassName}Dto ${className}Dto) {

            return service.save(${className}Dto);
    }

    /**
     * 修改
     */
    @ApiOperation("修改")
    @ApiImplicitParam(name = "${ClassName}Dto", value = "${functionName}对象")
    //@PreAuthorize("hasAuthority('${permissionPrefix}:update')")
    @Log(title = "${functionName}", businessType = BusinessType.UPDATE)
    @PutMapping
    public R edit(@RequestBody ${ClassName}Dto ${className}Dto) {
        return service.save(${className}Dto);
    }

    /**
     * 批量删除
     */
    @ApiOperation("批量删除")
    @ApiImplicitParam(name = "${pkColumn.javaField}s", value = "ids,逗号隔开")
    //@PreAuthorize("hasAuthority('${permissionPrefix}:delete')")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @DeleteMapping("/{${pkColumn.javaField}s}")
    public R remove(@PathVariable ${pkColumn.javaType} ${pkColumn.javaField}s) {
        return service.del(ids);
    }

}
